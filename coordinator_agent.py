from langchain.chat_models import init_chat_model
from langgraph_supervisor import create_supervisor
from web_agent import web_agent
from langchain_core.tools import Tool
from langgraph.prebuilt import create_react_agent
import re
from rag_no_img import generateAnswerTool
import os
from langsmith import traceable
from dotenv import load_dotenv
load_dotenv()
os.environ["LANGCHAIN_API_KEY"] = os.getenv("LANGCHAIN_API_KEY")
os.environ["LANGCHAIN_PROJECT"] = "Final Project"
os.environ["LANGCHAIN_TRACING_V2"] = "true"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
gemini_model = init_chat_model("gemini-2.0-flash", model_provider="google_genai")

# –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
def analyze_company(query: str) -> str:
    return f"üìä Analytische Auswertung f√ºr: {query}"

rag_tool = Tool(
    name="rag",
    func=generateAnswerTool,
    description="Frage,die mit Investorberichte verbunden sind, beantworten."
)

rag_agent = create_react_agent(
    model=gemini_model,
    tools=[rag_tool],
    name="rag_agent",
        prompt=(
            "Du bist ein spezialisierter RAG-Agent im Finanzbereich.\n"
            "Deine Aufgabe ist es, Fragen zu Marktanalysen, Trends, Vorhersagen und Finanzkennzahlen von  US-Unternehmen,wie Apple,Google,Meta,Microsoft,Nvidia"
            "zu beantworten ‚Äì ausschlie√ülich basierend auf offiziellen 10-Q und 10-K SEC-Berichten aus den Jahren 2020 bis 2024.\n"
            "\n"
            "Verwende ausschlie√ülich das Tool 'generateAnswerTool'."
        )
)

# –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def choose_agent(user_message: str) -> str:
    keywords_for_web = ["aktuell", "heute", "nachrichten", "kurs", "aktie", "preis", "schlusspreis"]
    if any(kw in user_message.lower() for kw in keywords_for_web):
        return "web_agent"
    else:
        return "analytics_agent"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–≤–µ—Ç–∞
def extract_text_from_response(response):
    messages = response.get("messages", [])
    for msg in reversed(messages):
        content = None
        if hasattr(msg, "content"):
            content = msg.content
        elif isinstance(msg, dict) and "content" in msg:
            content = msg["content"]
        if content and content.strip():
            return content.strip()
    return "Keine Antwort gefunden."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
def clean_and_format_news(text: str) -> str:
    # –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∫–∏ [Tavily]
    text = re.sub(r'\[Tavily\]', '', text)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    
    formatted_lines = []
    for line in lines:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - URL, –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É Markdown
        if re.match(r'^https?://', line):
            formatted_lines.append(f"[Link]({line})")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω–æ—Å—Ç—å –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            line = re.sub(r'^(üìä|üóû|üí∞|üìà)', r'**\1**', line)
            formatted_lines.append(line)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª—è –∞–±–∑–∞—Ü–µ–≤
    return "\n\n".join(formatted_lines)

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def coordinator_handle(user_message: str) -> str:
    chosen = choose_agent(user_message)

    if chosen == "web_agent":
        from web_agent import COMPANIES
        company_name = None
        for name in COMPANIES.keys():
            if re.search(rf"\b{name}\b", user_message, re.IGNORECASE):
                company_name = name.capitalize()
                break
        if not company_name:
            available = ", ".join(c.capitalize() for c in COMPANIES.keys())
            return f"‚ùå Bitte geben Sie eine bekannte Firma an. Verf√ºgbare Firmen: {available}"

        response = web_agent.invoke({
            "messages": [{"role": "user", "content": company_name}]
        })
    else:
        response = rag_agent.invoke({
            "messages": [{"role": "user", "content": user_message}]
        })

    raw_text = extract_text_from_response(response)

    # –ï—Å–ª–∏ web_agent, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∞—Å–∏–≤–æ
    if chosen == "web_agent":
        return clean_and_format_news(raw_text)
    else:
        return raw_text

# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–æ–∑–¥–∞–Ω–∏–µ supervisor-–∞
coordinator_agent = create_supervisor(
    agents=[web_agent, rag_agent],
    model=gemini_model,
    prompt=(
        "Du bist ein Koordinator-Agent, der zwei spezialisierte Agenten verwaltet:\n"
        "- web_agent f√ºr Nachrichten, Aktienkurse, aktuelle Finanzinformationen.\n"
        "- rag_agent f√ºr die Informationen aus Investorenberichten 2020‚Äì2024\n"
        "W√§hle den passenden Agenten basierend auf der Nutzerfrage und gib nur die Antwort dieses Agenten zur√ºck."
    ),
    add_handoff_back_messages=True,
    output_mode="full_history",
).compile()
q_to_web="Was sind die aktuellen Nachrichten √ºber Apple Aktienkurs?"
q_to_rag="What is revenue of Apple 2023?"
# –î–ª—è —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    test_msg =q_to_rag
    print(coordinator_handle(test_msg))
